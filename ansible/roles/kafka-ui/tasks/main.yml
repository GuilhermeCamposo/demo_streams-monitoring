- name: Log in as super user with token on OpenShift 4
  ansible.builtin.command: "oc login --token={{ token }}  --server={{ server }} --insecure-skip-tls-verify={{ insecure_skip_tls_verify }}"
  ignore_errors: false
  register: my_output
  changed_when: my_output.rc != 0

- name: Set output_dir
  ansible.builtin.set_fact:
    output_dir: '/tmp/certificates'

- name: Delete output_dir
  ansible.builtin.file:
    path: "{{ output_dir }}"
    state: absent

- name: Create output_dir
  ansible.builtin.file:
    path: "{{ output_dir }}"
    state: directory
    mode: '0755'

- name: Extract Kafka CA
  ansible.builtin.command: "oc extract -n {{ cluster_project }} secret/my-cluster-cluster-ca-cert --keys ca.crt --to {{ output_dir }}"
  ignore_errors: false
  register: my_output
  changed_when: my_output.rc != 0

- name: Create store
  ansible.builtin.command: |
    keytool -keystore {{ output_dir }}/client-truststore.jks -alias CARoot -import -file {{ output_dir }}/ca.crt -storepass kafka1 -noprompt
  ignore_errors: false
  register: my_output
  changed_when: my_output.rc != 0

- name: Check store secret
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: '{{ verify_tls }}'
    state: absent
    kind: Secret
    name: "kafka-client-store"
    namespace: '{{ cluster_project }}'
    api_version: v1

- name: Create store secret
  ansible.builtin.command: "oc create secret generic kafka-client-store --from-file={{ output_dir }}/client-truststore.jks -n {{ cluster_project }}"
  ignore_errors: false
  register: my_output
  changed_when: my_output.rc != 0

- name: Get kafka-ui user Secret
  kubernetes.core.k8s_info:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: false
    kind: Secret
    name: "ui"
    namespace: '{{ cluster_project }}'
    api_version: v1
  register: r_ui_user_secret
  until:
    - r_ui_user_secret.resources is defined
  retries: 10
  delay: 15

- name: Set kafka-ui authentication token
  ansible.builtin.set_fact:
    sasl_jaas_config: "{{ r_ui_user_secret.resources[0].data['sasl.jaas.config'] | b64decode }}"
  when:
    - r_ui_user_secret.resources[0].data is defined

- name: Evaluate kafka-ui ConfigMap
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: '{{ verify_tls }}'
    namespace: '{{ cluster_project }}'
    state: present
    resource_definition: "{{ lookup('template', 'kafka-ui-cm_jaas.yml.j2') }}"
  register: _kafka
  retries: 10
  delay: 10
  until: not _kafka.failed

- name: Evaluate kafka-ui Manifests
  kubernetes.core.k8s:
    api_key: '{{ token }}'
    host: '{{ server }}'
    validate_certs: '{{ verify_tls }}'
    namespace: '{{ cluster_project }}'
    state: present
    resource_definition: "{{ lookup('file', item) }}"
  register: _kafka
  retries: 1
  delay: 10
  until: not _kafka.failed
  loop:
    - deploy.yml
    - svc.yml
    - route.yml
